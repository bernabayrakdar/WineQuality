import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import preprocessing, model_selection
import keras
from sklearn.preprocessing import  StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.losses import binary_crossentropy
from keras.metrics import Accuracy
from sklearn.metrics import accuracy_score
from keras.layers import  Dropout, Activation, BatchNormalization
from keras.callbacks import EarlyStopping

data = pd.read_csv("winequality-red.csv")
y = data['quality']
data.drop(['quality'], inplace=True, axis=1)
data.head()

bins = (2,6,8)
gnames = ['bad', 'nice']
y = pd.cut(y, bins = bins, labels = gnames)

enc = LabelEncoder()
yenc = enc.fit_transform(y)

xtrain, xtest, ytrain, ytest = train_test_split(data, yenc,  test_size=0.2)
scale = StandardScaler()

scaledtrain = scale.fit_transform(xtrain)
scaledtest = scale.transform(xtest)

model = Sequential([    
        Dense(128, activation='relu', input_shape=(11,)),        
        Dense(64, activation='relu'),
        Dropout(0.25),
        Dense(64, activation='relu'),
        Dropout(0.25),
        Dense(1, activation='sigmoid')
])
adam = Adam(lr=0.0003)
callback = keras.callbacks.EarlyStopping(monitor='val_loss', 
    patience=5,verbose=1)
model.compile(optimizer=adam, loss='binary_crossentropy', metrics=['accuracy'])

hist = model.fit(scaledtrain, ytrain,batch_size = 16, epochs=100, callbacks=[callback], validation_data=(scaledtest,ytest))

preds=model.predict_classes(scaledtest)
accuracy_score(y_true=ytest,y_pred=preds)
